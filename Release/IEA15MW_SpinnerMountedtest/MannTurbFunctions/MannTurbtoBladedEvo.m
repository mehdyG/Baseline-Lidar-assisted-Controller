function MannTurbtoBladedEvo(Turbulence,TargetDir,varargin)
% This code convert the turbulence generated by 4D Mann turb to bladed style binary file 
% which can be further used to perform aeroelastic simulation, with or without a lidar

% by Feng Guo on 13 Jan 2022£¬ @FUAS
% Developed within the LIKE (Lidar Knowledge Europe) project, funded by the European Union¡¯s Horizon, 2020 research
% innovation programme under the Marie-Curie grant agreement No. 858358

%TargetDir  contains the mt4d to convert and the resulting binary will be written in this folder
FileName    = [ TargetDir '\' Turbulence.Field.CaseName];

n1          = Turbulence.Field.n1;

if isfield(Turbulence.Field,'n2_use')&&isfield(Turbulence.Field,'n3_use')
       n2          = Turbulence.Field.n2_use;
       n3          = Turbulence.Field.n3_use;
else
       n2          = Turbulence.Field.n2;
       n3          = Turbulence.Field.n3;
end

nt          = Turbulence.Field.n_upstream;
t           = Turbulence.Field.t_upstream;
shearExp    = Turbulence.alpha_shear;
SummVars(1) = Turbulence.Field.HRef;
SummVars(2) = 0;           % the clowise flag
SummVars(3) = Turbulence.URef;

% write out the bladed style wnd
Turbulence.nn          = [Turbulence.Field.n1 Turbulence.Field.n2 Turbulence.Field.n3];
Turbulence.LMax        = Turbulence.Field.LMax;


dy          = Turbulence.Field.dy;
dz          = Turbulence.Field.dz;
if isfield(Turbulence.Field,'z_use')
    z           = Turbulence.Field.z_use;
else
    z           = Turbulence.Field.z;
end
HubHeight   = SummVars(1);
URef        = SummVars(3);
dt          = Turbulence.Field.dt;
Xunfrozen   = Turbulence.Field.x_upstream;

if ~isfile( [FileName '.wnd'])&&~isfile([FileName '.evo'])

    fileID      = fopen([FileName  '.mt4d']);
    uvw         = fread(fileID,'real*4');
    fclose(fileID);

    uvw         = reshape(uvw, [n3 n2 n1 nt 3]);  % the dimention and sequnce should be fixed here

    u_t0        = squeeze(uvw(:,:,:,1,1));
    v_t0        = squeeze(uvw(:,:,:,1,2));
    w_t0        = squeeze(uvw(:,:,:,1,3));

    if nt>1
    u_trest     = squeeze(uvw(:,:,:,2:end,1));
    v_trest     = squeeze(uvw(:,:,:,2:end,2));
    w_trest     = squeeze(uvw(:,:,:,2:end,3));
    end    

    clear uvw
    u_t0       = permute(u_t0 ,[3 2 1]);  %Nt Nx Ny Nz   We actually use Nx as time in the simulation
    v_t0       = permute(v_t0 ,[3 2 1]);  
    w_t0       = permute(w_t0 ,[3 2 1]);
    u_trest    = permute(u_trest ,[4 3 2 1]);  %Nt Nx Ny Nz   We actually use Nx as time in the simulation
    v_trest    = permute(v_trest ,[4 3 2 1]);
    w_trest    = permute(w_trest ,[4 3 2 1]);

    % flip to change the propagation direction, we need to first flip x then y, to besure the field always follow right hand rule
    u_t0       = flip(flip(u_t0,1),2);
    v_t0       = flip(flip(v_t0,1),2);
    w_t0       = flip(flip(w_t0,1),2);
    u_trest    = flip(flip(u_trest,2),3);
    v_trest    = flip(flip(v_trest,2),3);
    w_trest    = flip(flip(w_trest,2),3);



    % add the mean shear to U component
    zOffset     = HubHeight;
    z0          = 0.03;      %the rougthness length, not really used

    for iz = 1:length(z)
        Hz           = max(z(iz)+HubHeight,0);
        Uz           = URef*(Hz/HubHeight)^shearExp;
        u_t0(:,:,iz) = u_t0(:,:,iz)+Uz;
        u_trest(:,:,:,iz) = u_trest(:,:,:,iz)+Uz;
    end

    % prepare to write out
    velocity(:,1,:,:) = u_t0;
    velocity(:,2,:,:) = v_t0;
    velocity(:,3,:,:) = w_t0;

    SummVars(4) = std(squeeze(u_t0(:,1,1)))/URef*100;
    SummVars(5) = std(squeeze(v_t0(:,1,1)))/URef*100;
    SummVars(6) = std(squeeze(w_t0(:,1,1)))/URef*100;

    disp('Exporting rotor plane wind field as ".wnd" binary files...')
    % write the .wnd
    WriteBLgrid([FileName '.wnd'], velocity, dy, dz, dt, zOffset, z0, SummVars)

    % write the sum

    fileID    = fopen([FileName '.sum'],'w');
    fprintf(fileID,'This summary file is not complete it only contains required information for the OpenFAST');
    fprintf(fileID,'\n');
    fprintf(fileID,'F        Clockwise rotation when looking downwind?\n');
    fprintf(fileID,[num2str(SummVars(1)) '  Hub height [m] \n']);
    fprintf(fileID,['UBar   =  ' num2str(SummVars(3)) ' m/s \n']);
    fprintf(fileID,['TI(u)  =  ' num2str(SummVars(4)) ' %%\n']);
    fprintf(fileID,['TI(v)  =  ' num2str(SummVars(5)) ' %%\n']);
    fprintf(fileID,['TI(w)  =  ' num2str(SummVars(6)) ' %%\n']);
    fprintf(fileID,['Height Offset =  ' num2str(0) ' m\n']);
    fprintf(fileID,'Creating a PERIODIC output file.');
    fclose(fileID);

    %end
    % apply binary scale and offset 
    % binary_Offset = [URef,0,0];
    % binary_Scale = Turbulence.Gamma/1000*ones(3,1);
    Scale       = 0.00001*SummVars(3)*SummVars(4:6);
    Offset      = [SummVars(3) 0 0];
    u_trest     = int16((u_trest-Offset(1))./Scale(1));
    v_trest     = int16((v_trest-Offset(2))./Scale(2));
    w_trest     = int16((w_trest-Offset(3))./Scale(3));

    %Nt Nx Ny Nz
    data2export = cat(5,u_trest,v_trest,w_trest);  % Xunfrozen=Nt t(x)=Nx Ny Nz Ncom
    data2export = permute(data2export,[5 3 4 2 1]);      %com y z t Xunfrozen

    if nt>1
    disp('Exporting 4D upstream wind field as ".evo" binary files...')
    fid = fopen([FileName '.evo'],'w');    
    fwrite(fid,int16(nt-1),'int16');     % write the head line with the number of unfrozen planes
    fwrite(fid,int16(Xunfrozen(2:end)),'int16');   % write the x positions of unfrozen planes        
    fwrite(fid,data2export(:),'int16');        
    fclose('all');
    disp('Binary file exported!')
    end

else
    fprintf('The .wnd and .evo files already exist! \n')
end

if ~isempty(varargin)
    delete([FileName  '.mt4d'])
end
end